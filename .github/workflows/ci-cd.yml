name: ci-cd pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      - name: cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: build backend image
        run: |
          docker build -f Dockerfile.backend -t music-rewrapped-backend .

      - name: build celery image
        run: |
          docker build -f Dockerfile.celery -t music-rewrapped-celery .

      - name: build frontend image
        run: |
          docker build -f client/Dockerfile -t music-rewrapped-frontend .

      - name: run backend migrations
        run: |
          docker network create app_network || true
          docker run --rm -d --name redis --network app_network redis:latest
          docker run --rm -d --name postgres --network app_network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=test_db \
            postgres:16
          sleep 5
          docker run --rm --network app_network \
            -e DATABASE_URL=postgresql+psycopg://postgres:password@postgres:5432/test_db \
            -e REDIS_URL=redis://redis:6379/0 \
            -e CI=true \
            music-rewrapped-backend \
            flask db upgrade

      - name: initialize test data
        run: |
          docker run --rm --network app_network \
            -e PGPASSWORD=password \
            postgres:16 \
            psql -h postgres -U postgres -d test_db -c "INSERT INTO \"user\" (id, username, email, spotify_id) VALUES (1, 'testuser', 'test@example.com', 'test_spotify_id') ON CONFLICT (id) DO NOTHING;"
        #~ note: if update migrations locally, ensure postgres container is running

      - name: run backend integration tests
        run: |
          docker run --rm --network app_network \
            -e DATABASE_URL=postgresql+psycopg://postgres:password@postgres:5432/test_db \
            -e REDIS_URL=redis://redis:6379/0 \
            -e CI=true \
            -e PYTHONPATH=/app \
            music-rewrapped-backend \
            python -m pytest tests/integration
        #~ ensure have tests/integration avail in codebase

      - name: check for frontend tests
        run: |
          echo "Checking for frontend test script..."
          if docker run --rm music-rewrapped-frontend bash -c "grep -q '\"test\"' /app/package.json"; then
            echo "Test script found, running tests..."
            docker run --rm music-rewrapped-frontend npm run test
          else
            echo "No test script found in package.json, skipping frontend tests"
            exit 0
          fi
        #~ if client tests exist, adjust command accordingly